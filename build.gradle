plugins {
    id 'java'
    id 'groovy'
    id 'jacoco'
    id 'org.springframework.boot' version "3.4.1"
}

version '1.0.0'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

dependencies {
    testImplementation platform(libs.junit.bom)
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    implementation platform(libs.spring.boot.dependencies)
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-log4j2'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation libs.springdoc.openapi
    implementation libs.selenium
    implementation libs.jtidy
    implementation 'org.springframework.boot:spring-boot-starter-graphql'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    testImplementation platform(libs.groovy.bom)
    testImplementation 'org.apache.groovy:groovy'
    testImplementation platform(libs.spock.bom)
    testImplementation 'org.spockframework:spock-core'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.graphql:spring-graphql-test'
    testImplementation 'org.spockframework:spock-spring'
}

configurations.configureEach {
    exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
}

tasks.register("clear") {
    dependsOn 'clean'
    doLast {
        delete 'dist'
    }
}

test {
    finalizedBy 'jacocoTestReport'
    useJUnitPlatform()
}

jacocoTestReport {
    dependsOn test
    reports {
        csv.required = true
        html.required = true
    }
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs << '-parameters'
}

tasks.register('install') {
    dependsOn 'build'
    group 'build'
    description 'prepare dist folder for deployment'
    doFirst {
        println '>>>mkdir dist'
        mkdir 'dist/lib'
        mkdir 'dist/bin'
        println '>>>mkdir dist/export'
        mkdir 'dist/export'
        mkdir 'dist/export/static'
    }

    doLast {
        println '>>>copy meta files'
        copy {
            from('.') {
                include 'logo.png'
                include 'app_meta.properties'
            }
            into './dist'
        }

        println '>>>copy bin and export'
        copy {
            from('.') {
                include 'export/**'
            }
            into 'dist'
        }
        println '>>>copy bin'
        copy {
            from 'scripts'
            into 'dist/bin'
        }
        println '>>>copy libs'
        copy {
            from('build/libs') {
                exclude 'eggfund*plain.jar'
            }
            into 'dist/lib'
        }
    }
}

